---
name: Deploy FTP

on:
  workflow_call:
  workflow_dispatch:
  workflow_run:
    branches: [master]
    types: [completed]
    workflows: [Continuous Integration]

env:
  dir: tmp

jobs:
  deploy-push:
    if: |
      github.event_name != 'workflow_dispatch' &&
      github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Displays GITHUB_CONTEXT
        env:
          GITHUB_CONTEXT: ${{ toJson(github.event) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Displays GITHUB_EVENT
        env:
          GITHUB_EVENT: ${{ github.event.before }}
        run: echo "$GITHUB_EVENT"
      - name: Filter Changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          base: HEAD
          filters: |
            source: src/**
      - name: Deploy
        if: steps.filter.outputs.source == 'true'
        run: echo "DEPLOY"

  # filter:
  # if: |
  #   github.event_name != 'workflow_dispatch' &&
  #   github.event.workflow_run.conclusion == 'success'
  #   runs-on: ubuntu-latest
  #   permissions:
  #     pull-requests: read
  #   outputs:
  #     source: ${{ steps.filter.outputs.source }}
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3
  #     - name: Filter Changes
  #       uses: dorny/paths-filter@v2
  #       id: filter
  #       with:
  #         filters: |
  #           source:
  #             - "src/**"

  # deploy-ftp:
  #   needs: filter
  #   if: |
  #     ${{ github.event_name == 'workflow_dispatch' }} ||
  #     ${{ needs.filter.outputs.source == 'true' }}
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Install Poetry
  #       uses: ./.github/actions/poetry
  #     - name: Prepare Content
  #       run: |
  #         mkdir ${{ env.dir }} &&
  #         poetry export -o ${{ env.dir }}/requirements.txt --only django &&
  #         cd src && cp -r project app manage.py ../${{ env.dir }}
  #     - name: Deploy FTP
  #       uses: SamKirkland/FTP-Deploy-Action@v4.3.4
  #       with:
  #         port: ${{ secrets.FTP_PORT }}
  #         server: ${{ secrets.FTP_SERVER }}
  #         username: ${{ secrets.FTP_USERNAME }}
  #         password: ${{ secrets.FTP_PASSWORD }}
  #         protocol: ftps
  #         local-dir: ./${{ env.dir }}/
  #         server-dir: ./
  #         log-level: verbose
